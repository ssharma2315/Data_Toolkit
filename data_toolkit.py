# -*- coding: utf-8 -*-
"""Data_Toolkit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14X6GG2_g2oySHpbW508h8GdzEdbFrVq2

1. What is NumPy, and why is it widely used in Python?

Answer - NumPy is a fundamental library for numerical computing in Python, providing fast, memory-efficient multi-dimensional arrays and mathematical functions for data manipulation. It’s widely used for scientific and data analysis tasks.

2. How does broadcasting work in NumPy?

Answer - Broadcasting allows arithmetic operations between arrays of different shapes by automatically expanding smaller arrays to match the larger one’s shape without making copies.

3. What is a Pandas DataFrame?

Answer - A DataFrame is a 2-dimensional, labeled data structure that holds tabular data (like an Excel table), with rows and columns that can have different data types.

4. Explain the use of the groupby() method in Pandas.

Answer - groupby() splits data into groups based on a key, applies a function (like mean or sum), and then combines the results, enabling easy aggregation and analysis.

5. Why is Seaborn preferred for statistical visualizations?

Answer - Seaborn integrates with Pandas and provides beautiful, informative statistical plots with minimal code, making it great for exploratory data analysis.

6. What are the differences between NumPy arrays and Python lists?

Answer - NumPy arrays are homogeneous, faster, support vectorized operations, and use less memory compared to Python lists, which are heterogeneous and slower.

7. What is a heatmap, and when should it be used?

Answer - A heatmap displays data in a matrix format with colors representing values, useful for showing correlations, patterns, or intensities in data.

8. What does the term “vectorized operation” mean in NumPy?

Answer - A vectorized operation means applying an operation to an entire array at once, avoiding explicit Python loops, which makes computations faster and more concise.

9. How does Matplotlib differ from Plotly?

Answer - Matplotlib creates static, publication-quality plots with extensive customization, while Plotly creates interactive, web-ready visualizations with built-in interactivity like zoom and hover.

10. What is the significance of hierarchical indexing in Pandas?

Answer - Hierarchical indexing (MultiIndex) allows multiple levels of row or column labels, enabling more complex data analysis like grouped data or multi-level aggregations.

11. What is the role of Seaborn’s pairplot() function?

Answer - pairplot() visualizes pairwise relationships between variables in a dataset using scatterplots and histograms, helping in exploratory data analysis.

12. What is the purpose of the describe() function in Pandas?

Answer - describe() summarizes a DataFrame’s numerical columns, giving count, mean, standard deviation, min, max, and quartiles for quick data inspection.

13. Why is handling missing data important in Pandas?

Answer - Handling missing data prevents errors, biases, and inaccuracies in analysis or modeling by cleaning or filling missing values properly.

14. What are the benefits of using Plotly for data visualization?

Answer - Plotly provides interactive, web-based plots with features like zoom, hover, tooltips, and easy sharing, making data exploration more dynamic.

15. How does NumPy handle multidimensional arrays?

Answer - NumPy uses the ndarray object to efficiently handle arrays of any dimension with flexible shape manipulation and slicing.

16. What is the role of Bokeh in data visualization?

Answer - Bokeh creates interactive, web-ready visualizations that can be embedded in dashboards, with real-time data updates and interactivity.

17. Explain the difference between apply() and map() in Pandas.

Answer - map() applies a function element-wise to a Series, while apply() applies a function to an entire Series or DataFrame axis, useful for row or column operations.

18. What are some advanced features of NumPy?

Answer - Advanced features include broadcasting, masked arrays, linear algebra functions, Fourier transforms, and support for large-scale multidimensional arrays.

19. How does Pandas simplify time series analysis?

Answer - Pandas simplifies time series with date parsing, indexing, resampling, shifting, and rolling window calculations.

20. What is the role of a pivot table in Pandas?

Answer - A pivot table aggregates data across multiple dimensions, reshaping it to reveal trends and patterns, similar to Excel’s pivot table.

21. Why is NumPy’s array slicing faster than Python’s list slicing?

Answer - NumPy arrays are stored in contiguous memory, and slicing creates views instead of copies, making it faster than Python’s list slicing.

22. What are some common use cases for Seaborn?

Answer - Seaborn is commonly used for creating histograms, boxplots, violin plots, scatter plots, heatmaps, and pairwise plots for statistical analysis.

---
"""

"1. How do you create a 2D NumPy array and calculate the sum of each row?"
# import numpy as np
# arr1 = np.array([[1,2,3,4] , [5,6,7,8]])
# arr1
# for i in range(0,2):
#     print(arr1[i].sum())

"2. Write a Pandas script to find the mean of a specific column in a DataFrame?"
# import pandas as pd
# df = pd.DataFrame({"A": [1,2,3,4,5] , "B": [6,7,8,9,10]})
# df
# df['A'].sum()
# df['B'].sum()

"3. Write a Pandas script to find the mean of a specific column in a DataFrame?"
# import pandas as pd
# df = pd.DataFrame({"A": [1,2,3,4,5] , "B": [6,7,8,9,10]})
# df["A"].mean()
# df["B"].mean()

"4. How do you calculate the correlation matrix using Seaborn and visualize it with a heatmap?"
# import seaborn as sns
# sns.get_dataset_names()
# df.load_dataset("diamonds")
# df1 = df[["carat" , "depth"]]
# sns.heatmap(df1.corr() , annot = True)

"5. Generate a bar plot using Plotly."
# import plotly.graph_objects as go
# import seaborn as sns
# import plotly.express as px
# df = sns.load_dataset("diamonds")
# fig = go.Figure()
# fig.add_trace(go.Bar(x = df.carat , y = df.depth))

"6. Create a DataFrame and add a new column based on an existing column."

# import pandas as pd
# import seaborn as sns
# df = sns.load_dataset("diamonds")
# df["Status"] = df["price"].mean()
# df


"7. Write a program to perform element-wise multiplication of two NumPy arrays."
# import numpy as np
# arr1 = np.array([[1,2] , [6,7]])
# arr2 = np.array([[11,12] , [16,17]])
# arr_mul = np.matmul(arr1 , arr2)
# arr_mul

"8. Create a line plot with multiple lines using Matplotlib."
# import matplotlib.pyplot as plt
# import numpy as np
# x = [1,2,3,4,5,6]
# y = [7,8,9,10,11 , 12]
# plt.plot(x , y,  label = 'line 1')
# plt.plot(y,x, label = 'line 2' )
# plt.plot(x , np.sin(x) , label = 'curve1')
# plt.plot(y , np.sin(y) , label = 'curve2')
# plt.legend()
# plt.show()

"9. Generate a Pandas DataFrame and filter rows where a column value is greater than a threshold."
# import pandas as pd
# df = pd.DataFrame({"A" : [1,2,3,4,5] , "B" : [6,7,8,9,10]})
# threshold = 2
# filtered_rows = df.loc[df['A'] > threshold]
# filtered_rows

"10. Create a histogram using Seaborn to visualize a distribution."
# import seaborn as sns
# df = sns.load_dataset("diamonds")
# sns.histplot(x= df.carat , bins = 20)

"11. Perform matrix multiplication using NumPy."
# import numpy as np
# arr1 = np.array([[1,2,3],[3,4,5]])
# arr2 = np.array([[6,7],[8,9],[10,11]])
# product = np.matmul(arr1,arr2)
# product

"12. Use Pandas to load a CSV file and display its first 5 rows."
# from google.colab import files
# files.upload()
# import pandas as pd

# df = pd.read_csv("dummy_data.csv")
# df

"13.Create a 3D scatter plot using Plotly."

# import plotly.graph_objects as go
# import seaborn as sns
# df = sns.load_dataset("diamonds")
# df
# fig = go.Figure()
# fig.add_trace(go.Scatter3d(x= df['carat'] , y = df['depth'] , z = df['price'] ))